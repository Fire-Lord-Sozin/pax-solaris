fight_calculate_effect = {
	clear_array = missed_targets
	if = {
		limit = { check_variable = { currently_selected_spell = 1 } }
		set_variable = { raw_change = spell_1_vitality_recovered^fight_attacker_num }
		calculate_change = yes
		add_to_variable = { var = vitality_array^fight_defender_num value = raw_change }
		
		set_variable = { duplicates_to_remove = 1 }
		set_variable = { duplicates_to_remove_from = fight_defender_num }
		#clear_duplicates = yes

		add_to_array = { status_effect_target_ids = fight_defender_num } #Id of the pony with status effect
		add_to_array = { status_effect_spell_type = 1 } #Spell origin, prevents doubleups
		add_to_array = { status_effect_duration = 2 } #Duration in turns
		add_to_array = { status_effect_type_id = 2 } #Type of status effect. 1 = attack bonus, 2 = defence bonus, 3 = health/turn, 4 = vitality/turn, 5 = evasion
		add_to_array = { status_effect_magnitude = 0.25 } #Magnitide of type
		subtract_from_variable = { defence_multiplier_array^fight_defender_num = 0.25 }
		set_variable = { action_display_var = 1 }
		sound_effect = "sol_shield_ev"
	}
	if = {
		limit = { check_variable = { currently_selected_spell = 2 } }
		fight_probability_calc = yes
		if = {
			limit = { check_variable = { fight_probability > evasion_array^fight_defender_num } }
			set_variable = { raw_change = spell_2_damage_array^fight_attacker_num }
			calculate_change = yes
			multiply_variable = { var = raw_change value = attack_multiplier_array^fight_attacker_num }
			multiply_variable = { var = raw_change value = defence_multiplier_array^fight_defender_num }
			subtract_from_variable = { var = health_array^fight_defender_num value = raw_change }
		}
		else = {
			add_to_array = { missed_targets = fight_defender_num }
		}
		subtract_from_variable = { var = vitality_array^fight_attacker_num value = spell_cost^2 }
		set_variable = { action_display_var = 2 }
		attack_sound = yes		
	}
	if = {
		limit = { check_variable = { currently_selected_spell = 3 } }
		if = {
			limit = { is_in_array = { right_fighters_array = fight_defender_num } }
			for_each_loop = {
				array = right_fighters_array
				value = current_target

				set_variable = { raw_change = 35 }
				calculate_change = yes
				add_to_variable = { var = health_array^current_target value = raw_change }
				set_variable = { raw_change = 35 }
				calculate_change = yes
				add_to_variable = { var = vitality_array^current_target value = raw_change }

				set_variable = { duplicates_to_remove = 3 }
				set_variable = { duplicates_to_remove_from = current_target }
				#clear_duplicates = yes

				add_to_array = { status_effect_target_ids = current_target }
				add_to_array = { status_effect_spell_type = 3 }
				add_to_array = { status_effect_duration = 5 } 
				add_to_array = { status_effect_type_id = 1 } 
				add_to_array = { status_effect_magnitude = 0.25 }
				add_to_variable = { attack_multiplier_array^current_target = 0.2 }
			}
		}
		if = {
			limit = { is_in_array = { left_fighters_array = fight_defender_num } }
			for_each_loop = {
				array = left_fighters_array
				value = current_target

				set_variable = { raw_change = 35 }
				calculate_change = yes
				add_to_variable = { var = health_array^current_target value = raw_change }
				set_variable = { raw_change = 35 }
				calculate_change = yes
				add_to_variable = { var = vitality_array^current_target value = raw_change }

				set_variable = { duplicates_to_remove = 3 }
				set_variable = { duplicates_to_remove_from = current_target }
				#clear_duplicates = yes

				add_to_array = { status_effect_target_ids = current_target }
				add_to_array = { status_effect_spell_type = 3 }
				add_to_array = { status_effect_duration = 5 } 
				add_to_array = { status_effect_type_id = 1 } 
				add_to_array = { status_effect_magnitude = 0.25 }
				add_to_variable = { attack_multiplier_array^current_target = 0.2 }
			}
		}
		subtract_from_variable = { var = vitality_array^fight_attacker_num value = spell_cost^3 }
		set_variable = { action_display_var = 3 }
		sound_effect = "sol_lifebringer_ev"
	}
	if = {
		limit = { check_variable = { currently_selected_spell = 4 } }
		if = {
			limit = { is_in_array = { right_fighters_array = fight_defender_num } }
			for_each_loop = {
				array = right_fighters_array
				value = current_target

				set_variable = { duplicates_to_remove = 4 }
				set_variable = { duplicates_to_remove_from = current_target }
				#clear_duplicates = yes

				add_to_array = { status_effect_target_ids = current_target }
				add_to_array = { status_effect_spell_type = 4 } 
				add_to_array = { status_effect_duration = 8 } 
				add_to_array = { status_effect_type_id = 2 } 
				add_to_array = { status_effect_magnitude = 0.5 }
				subtract_from_variable = { defence_multiplier_array^current_target = 0.5 }
			}
		}
		if = {
			limit = { is_in_array = { left_fighters_array = fight_defender_num } }
			for_each_loop = {
				array = left_fighters_array
				value = current_target

				set_variable = { duplicates_to_remove = 4 }
				set_variable = { duplicates_to_remove_from = current_target }
				#clear_duplicates = yes

				add_to_array = { status_effect_target_ids = current_target }
				add_to_array = { status_effect_spell_type = 4 } 
				add_to_array = { status_effect_duration = 8 } 
				add_to_array = { status_effect_type_id = 2 } 
				add_to_array = { status_effect_magnitude = 0.5 }
				subtract_from_variable = { defence_multiplier_array^current_target = 0.5 }
			}
		}		
		subtract_from_variable = { var = vitality_array^fight_attacker_num value = spell_cost^4 }
		set_variable = { action_display_var = 4 }
		sound_effect = "sol_plasma_shield_ev"
	}
	if = {
		limit = { check_variable = { currently_selected_spell = 5 } }
		if = {
			limit = { is_in_array = { right_fighters_array = fight_defender_num } }
			for_each_loop = {
				array = right_fighters_array
				value = current_target 

				fight_probability_calc = yes
				add_to_variable = { var = fight_probability value = 50 }
				if = {
					limit = { check_variable = { fight_probability > evasion_array^current_target } }
					set_variable = { raw_change = 60 }
					calculate_change = yes
					calculate_change = yes
					multiply_variable = { var = raw_change value = attack_multiplier_array^fight_attacker_num }
					multiply_variable = { var = raw_change value = defence_multiplier_array^current_target  }
					subtract_from_variable = { var = health_array^current_target value = raw_change }

					set_variable = { duplicates_to_remove = 5 }
					set_variable = { duplicates_to_remove_from = current_target }
					#clear_duplicates = yes

					add_to_array = { status_effect_target_ids = current_target }
					add_to_array = { status_effect_spell_type = 5 } 
					add_to_array = { status_effect_duration = 5 }
					add_to_array = { status_effect_type_id = 3 } 
					add_to_array = { status_effect_magnitude = 10 }
					subtract_from_variable = { health_change_array^current_target = 10 }
				}
				else = {
					add_to_array = { missed_targets = current_target }
				}
			}
		}
		if = {
			limit = { is_in_array = { left_fighters_array = fight_defender_num } }
			for_each_loop = {
				array = left_fighters_array
				value = current_target 

				fight_probability_calc = yes
				add_to_variable = { var = fight_probability value = 40 }
				if = {
					limit = { check_variable = { fight_probability > evasion_array^current_target } }
					set_variable = { raw_change = 60 }
					calculate_change = yes
					calculate_change = yes
					multiply_variable = { var = raw_change value = attack_multiplier_array^fight_attacker_num }
					multiply_variable = { var = raw_change value = defence_multiplier_array^current_target }
					subtract_from_variable = { var = health_array^current_target value = raw_change }

					set_variable = { duplicates_to_remove = 5 }
					set_variable = { duplicates_to_remove_from = current_target }
					#clear_duplicates = yes

					add_to_array = { status_effect_target_ids = current_target }
					add_to_array = { status_effect_spell_type = 5 } 
					add_to_array = { status_effect_duration = 5 }
					add_to_array = { status_effect_type_id = 3 } 
					add_to_array = { status_effect_magnitude = 10 }
					subtract_from_variable = { health_change_array^current_target = 10 }
				}
				else = {
					add_to_array = { missed_targets = current_target }
				}
			}
		}
		subtract_from_variable = { var = vitality_array^fight_attacker_num value = spell_cost^5 }	
		set_variable = { action_display_var = 5 }
		sound_effect = "sol_supernova_ev"
	}
	if = {
		limit = { check_variable = { currently_selected_spell = 6 } }
		set_variable = { raw_change = 25 }
		calculate_change = yes
		add_to_variable = { var = health_array^fight_defender_num value = raw_change  }

		set_variable = { duplicates_to_remove = 6 }
		set_variable = { duplicates_to_remove_from = fight_defender_num }
		#clear_duplicates = yes

		add_to_array = { status_effect_target_ids = fight_defender_num }
		add_to_array = { status_effect_spell_type = 6 } 
		add_to_array = { status_effect_duration = 6 }
		add_to_array = { status_effect_type_id = 2 }
		add_to_array = { status_effect_magnitude = 0.25 }
		subtract_from_variable = { defence_multiplier_array^fight_defender_num = 0.25 }

		add_to_array = { status_effect_target_ids = fight_defender_num }
		add_to_array = { status_effect_spell_type = 6.5 } 
		add_to_array = { status_effect_duration = 5 } 
		add_to_array = { status_effect_type_id = 3 } 
		add_to_array = { status_effect_magnitude = -10 }
		subtract_from_variable = { health_change_array^fight_defender_num = -10 }

		subtract_from_variable = { var = vitality_array^fight_attacker_num value = spell_cost^6 }
		set_variable = { action_display_var = 6 }
		sound_effect = "sol_ally_of_shadows_ev"
	}
	if = {
		limit = { check_variable = { currently_selected_spell = 7 } }

		set_variable = { duplicates_to_remove = 7 }
		set_variable = { duplicates_to_remove_from = fight_defender_num }
		#clear_duplicates = yes

		add_to_array = { status_effect_target_ids = fight_defender_num }
		add_to_array = { status_effect_spell_type = 7 } 
		add_to_array = { status_effect_duration = 10 }
		add_to_array = { status_effect_type_id = 1 }
		add_to_array = { status_effect_magnitude = -0.75 }
		add_to_variable = { attack_multiplier_array^fight_defender_num = -0.75 }

		add_to_array = { status_effect_target_ids = fight_defender_num }
		add_to_array = { status_effect_spell_type = 7.5 } 
		add_to_array = { status_effect_duration = 10 }
		add_to_array = { status_effect_type_id = 5 }
		add_to_array = { status_effect_magnitude = 70 }
		add_to_variable = { evasion_array^fight_defender_num = 70 }

		subtract_from_variable = { var = vitality_array^fight_attacker_num value = spell_cost^7 }
		set_variable = { action_display_var = 7 }
		sound_effect = "sol_dreamwalker_ev"
	}
	if = {
		limit = { check_variable = { currently_selected_spell = 8 } }
		if = {
			limit = { is_in_array = { right_fighters_array = fight_defender_num } }
			for_each_loop = {
				array = right_fighters_array
				value = current_target

				set_variable = { duplicates_to_remove = 8 }
				set_variable = { duplicates_to_remove_from = current_target }
				#clear_duplicates = yes

				add_to_array = { status_effect_target_ids = current_target }
				add_to_array = { status_effect_spell_type = 8 }
				add_to_array = { status_effect_duration = 11 }
				add_to_array = { status_effect_type_id = 2 }
				add_to_array = { status_effect_magnitude = -0.5 }
				subtract_from_variable = { defence_multiplier_array^current_target = -0.5 }
			}
		}
		if = {
			limit = { is_in_array = { left_fighters_array = fight_defender_num } }
			for_each_loop = {
				array = left_fighters_array
				value = current_target

				set_variable = { duplicates_to_remove = 8 }
				set_variable = { duplicates_to_remove_from = current_target }
				#clear_duplicates = yes

				add_to_array = { status_effect_target_ids = current_target }
				add_to_array = { status_effect_spell_type = 8 }
				add_to_array = { status_effect_duration = 11 }
				add_to_array = { status_effect_type_id = 2 }
				add_to_array = { status_effect_magnitude = -0.5 }
				subtract_from_variable = { defence_multiplier_array^current_target = -0.5 }
			}
		}
		subtract_from_variable = { var = vitality_array^fight_attacker_num value = spell_cost^8 }
		set_variable = { action_display_var = 8 }
		sound_effect = "sol_mistress_of_terror_ev"
	}
	set_variable = { actions_display_attacker = fight_attacker_num }
	set_variable = { actions_display_defender = fight_defender_num }

	set_variable { var = background_darkener_frame value = 1 }
	for_each_loop = {
		array = fighters_array
		if = {
			limit = { NOT = { is_in_array = { dead_fighters = v } } }
			set_variable = { var = damage_frame_array^v value = 1 }
		}
		else = {
			set_variable = { var = damage_frame_array^v value = 3 }
		}
	}

	add_to_array = { has_taken_turn_array = fight_attacker_num }
	
	for_each_loop = {
		array = fighters_array
		set_variable = { attack_multiplier_array^v = 1 }
		set_variable = { defence_multiplier_array^v = 1 }
		set_variable = { evasion_array^v = evasion_initial_array^v }
		set_variable = { health_change_array^v = 0 }
		set_variable = { vitality_change_array^v = 0 }
	}
	clear_array = active_effects
	for_each_loop = {
		array = status_effect_target_ids
		value = current_target
		index = current_target_index

		if = {
			limit = {
				NOT = {
					any_of = {
						array = active_effects
						value = active_effects_value
						index = active_effects_index

						check_variable = { status_effect_target_ids^active_effects_index = current_target }
						check_variable = { active_effects_value = status_effect_spell_type^current_target_index }
					}
					is_in_array = { dead_fighters = current_target }
				}
			}
			if = {
				limit = { check_variable = { status_effect_type_id^current_target_index = 1 } }
				add_to_variable = { attack_multiplier_array^current_target = status_effect_magnitude^current_target_index }
			}
			if = {
				limit = { check_variable = { status_effect_type_id^current_target_index = 2 } }
				subtract_from_variable = { defence_multiplier_array^current_target = status_effect_magnitude^current_target_index }
			}
			if = {
				limit = { check_variable = { status_effect_type_id^current_target_index = 5 } }
				add_to_variable = { evasion_array^current_target = status_effect_magnitude^current_target_index }
			}
			if = {
				limit = { check_variable = { status_effect_type_id^current_target_index = 3 } }
				subtract_from_variable = { health_change_array^current_target = status_effect_magnitude^current_target_index }
			}
			if = {
				limit = { check_variable = { status_effect_type_id^current_target_index = 4 } }
				subtract_from_variable = { vitality_change_array^current_target = status_effect_magnitude^current_target_index }
			}
		}
		add_to_array = { active_effects = status_effect_spell_type^current_target_index }
	}


	fight_calculate_pos = yes
	percentify = yes
	clear_variable = currently_selected_spell

	handle_custom_effects = yes
	if = {
		limit = { NOT = { has_variable = sol_dialogue_var } }
		fight_handle_turns = yes
		available_actions = yes
	}

	add_to_variable = { var = sol_fight_var value = 1 }
}
fight_handle_turns = {
	if = {
		limit = {
			has_country_flag = fight_right_turn
			all_of = {
				array = right_fighters_array
				is_in_array = { has_taken_turn_array = v }
			}
		}
		clr_country_flag = fight_right_turn
		set_country_flag = fight_left_turn
		for_each_loop = {
			array = left_fighters_array
			remove_from_array = { has_taken_turn_array = v }
		}
		handle_status_effects = yes
		if = {
			limit = { has_country_flag = left_side_ai_controlled }
			clear_array = ai_players_temp
			for_each_loop = {
				array = ai_controlled_fighters
				if = {
					limit = { NOT = { is_in_array = { dead_fighters = v } } }
					add_to_array = { ai_players_temp = v }
				}
			}
			set_variable = { var = current_ai_fighter value = 0 }
			country_event = fightevent.1
		}
	}
	if = {
		limit = {
			has_country_flag = fight_left_turn
			all_of = {
				array = left_fighters_array
				is_in_array = { has_taken_turn_array = v }
			}
		}
		clr_country_flag = fight_left_turn
		set_country_flag = fight_right_turn
		for_each_loop = {
			array = right_fighters_array
			remove_from_array = { has_taken_turn_array = v }
		}
		handle_status_effects = yes
		if = {
			limit = { has_country_flag = right_side_ai_controlled }
			clear_array = ai_players_temp
			for_each_loop = {
				array = ai_controlled_fighters
				if = {
					limit = { NOT = { is_in_array = { dead_fighters = v } } }
					add_to_array = { ai_players_temp = v }
				}
			}
			set_variable = { var = current_ai_fighter value = 0 }
			country_event = fightevent.1
		}
	}
	for_each_loop = {
		array = dead_fighters
		add_to_array = { has_taken_turn_array = v }
	}
}
fight_calculate_pos = {
	for_each_loop = {
		array = fighters_array
		value = current_health_target
		index = current_health_index
		if = {
			limit = {
				check_variable = {
					var = health_array^current_health_target
					value = 0
					compare = less_than_or_equals
				}
			}
			add_to_array = { dead_fighters = current_health_target }
			set_variable = { var = damage_frame_array^current_health_target value = 3 }
			if = {
				limit = {
					is_in_array = { right_fighters_array = current_health_target }
					all_of = {
						array = right_fighters_array
						is_in_array = { dead_fighters = v }
					}
				}
				set_country_flag = sol_fight_left_win
				handle_victory = yes
			}
			if = {
				limit = {
					is_in_array = { left_fighters_array = current_health_target }
					all_of = {
						array = left_fighters_array
						is_in_array = { dead_fighters = v }
					}
				}
				set_country_flag = sol_fight_right_win
				handle_victory = yes
			}
		}
		if = {
			limit = { is_in_array = { dead_fighters = current_health_target } }
			set_variable = { health_array^current_health_target = 0 }
			set_variable = { vitality_array^current_health_target = 0 }
		}
		clamp_variable = {
			var = health_array^current_health_target
			min = 0
			max = max_health_array^current_health_target
		}
		clamp_variable = {
			var = vitality_array^current_health_target
			min = 0
			max = max_vitality_array^current_health_target
		}
		if = {
			limit = { is_in_array = { right_fighters_array = current_health_target } }
			set_variable = { health_pos_array^current_health_target = 224 }
			set_temp_variable = { defender_health_bar_pos = health_array^current_health_target }
			divide_temp_variable = { defender_health_bar_pos = max_health_array^current_health_target }
			multiply_temp_variable = { defender_health_bar_pos = 223 }
			round_temp_variable = defender_health_bar_pos
			subtract_from_variable = { health_pos_array^current_health_target = defender_health_bar_pos }

			set_variable = { vitality_pos_array^current_health_target = 218 }
			set_temp_variable = { defender_vitality_bar_pos = vitality_array^current_health_target }
			divide_temp_variable = { defender_vitality_bar_pos = max_vitality_array^current_health_target }
			multiply_temp_variable = { defender_vitality_bar_pos = 198 }
			round_temp_variable = defender_vitality_bar_pos
			subtract_from_variable = { vitality_pos_array^current_health_target = defender_vitality_bar_pos }
		}
		else = {
			set_variable = { health_pos_array^current_health_target = -238 }
			set_temp_variable = { defender_health_bar_pos = health_array^current_health_target }
			divide_temp_variable = { defender_health_bar_pos = max_health_array^current_health_target }
			multiply_temp_variable = { defender_health_bar_pos = 223 }
			round_temp_variable = defender_health_bar_pos
			add_to_variable = { health_pos_array^current_health_target = defender_health_bar_pos }

			set_variable = { vitality_pos_array^current_health_target = -213 }
			set_temp_variable = { defender_vitality_bar_pos = vitality_array^current_health_target }
			divide_temp_variable = { defender_vitality_bar_pos = max_vitality_array^current_health_target }
			multiply_temp_variable = { defender_vitality_bar_pos = 198 }
			round_temp_variable = defender_vitality_bar_pos
			add_to_variable = { vitality_pos_array^current_health_target = defender_vitality_bar_pos }
		}
	}
}
calculate_change = {
	random_list = {
		1 = { add_to_variable = { raw_change = 0 } }
		1 = { add_to_variable = { raw_change = 1 } }
		1 = { add_to_variable = { raw_change = 2 } }
		1 = { add_to_variable = { raw_change = 3 } }
		1 = { add_to_variable = { raw_change = 4 } }
		1 = { add_to_variable = { raw_change = 5 } }
		1 = { add_to_variable = { raw_change = -1 } }
		1 = { add_to_variable = { raw_change = -2 } }
		1 = { add_to_variable = { raw_change = -3 } }
		1 = { add_to_variable = { raw_change = -4 } }
		1 = { add_to_variable = { raw_change = -5 } }
	}
}
available_actions = {
	for_each_loop = {
		array = fighters_array
		set_variable = { var = spell_1_frame_array^v value = 1 }
		set_variable = { var = spell_2_frame_array^v value = 1 }
		set_variable = { var = spell_3_frame_array^v value = 1 }
		set_variable = { var = spell_4_frame_array^v value = 1 }
		set_variable = { var = spell_5_frame_array^v value = 1 }
		if = {
			limit = { 
				OR = {
					is_in_array = { array = has_taken_turn_array value = v }
					is_in_array = { array = ai_controlled_fighters value = v } #Player can't cast the spells from a fighter if they've taken their turn, are AI or dead
					is_in_array = { array = dead_fighters value = v } 
				}
			}
			set_variable = { var = spell_1_frame_array^v value = 2 }
			set_variable = { var = spell_2_frame_array^v value = 2 }
			set_variable = { var = spell_3_frame_array^v value = 2 }
			set_variable = { var = spell_4_frame_array^v value = 2 }
			set_variable = { var = spell_5_frame_array^v value = 2 }
		}
		if = {
			limit = { check_variable = { spell_2_cost_array^v > vitality_array^v } }
			set_variable = { var = spell_2_frame_array^v value = 2 }
		}
		if = {
			limit = { check_variable = { spell_3_cost_array^v > vitality_array^v } }
			set_variable = { var = spell_3_frame_array^v value = 2 }
		}
		if = {
			limit = { check_variable = { spell_4_cost_array^v > vitality_array^v } }
			set_variable = { var = spell_4_frame_array^v value = 2 }
		}
		if = {
			limit = { check_variable = { spell_5_cost_array^v > vitality_array^v } }
			set_variable = { var = spell_5_frame_array^v value = 2 }
		}
	}
}
handle_status_effects = {
	if = {
		limit = { has_country_flag = fight_right_turn }
		for_each_loop = {
			array = right_fighters_array
			add_to_variable = { health_array^v = health_change_array^v }
			add_to_variable = { vitality_array^v = vitality_change_array^v }
		}
	}
	if = {
		limit = { has_country_flag = fight_left_turn }
		for_each_loop = {
			array = left_fighters_array
			add_to_variable = { health_array^v = health_change_array^v }
			add_to_variable = { vitality_array^v = vitality_change_array^v }
		}
	}
	for_each_loop = {
		array = status_effect_target_ids
		subtract_from_variable = { status_effect_duration^i = 1 }
		if = {
			limit = { check_variable = { status_effect_duration^i < 1 } }
			set_variable = { status_effect_target_ids^i = -1000 }
			set_variable = { status_effect_spell_type^i = -1000 }
			set_variable = { status_effect_duration^i = -1000 }
			set_variable = { status_effect_type_id^i = -1000 }
			set_variable = { status_effect_magnitude^i = -1000 }
		}
	}
	if = {
		limit = { is_in_array = { status_effect_target_ids = -1000 } }
		remove_from_array = { status_effect_target_ids = -1000 }
		remove_from_array = { status_effect_spell_type = -1000 }
		remove_from_array = { status_effect_duration = -1000 }
		remove_from_array = { status_effect_type_id = -1000 }
		remove_from_array = { status_effect_magnitude = -1000 }
	}

	for_each_loop = {
		array = fighters_array
		set_variable = { attack_multiplier_array^v = 1 }
		set_variable = { defence_multiplier_array^v = 1 }
		set_variable = { evasion_array^v = evasion_initial_array^v }
		set_variable = { health_change_array^v = 0 }
		set_variable = { vitality_change_array^v = 0 }
	}
	clear_array = active_effects
	for_each_loop = {
		array = status_effect_target_ids
		value = current_target
		index = current_target_index

		if = {
			limit = {
				NOT = {
					any_of = {
						array = active_effects
						value = active_effects_value
						index = active_effects_index

						check_variable = { status_effect_target_ids^active_effects_index = current_target }
						check_variable = { active_effects_value = status_effect_spell_type^current_target_index }
					}
					is_in_array = { dead_fighters = current_target }
				}
			}
			if = {
				limit = { check_variable = { status_effect_type_id^current_target_index = 1 } }
				add_to_variable = { attack_multiplier_array^current_target = status_effect_magnitude^current_target_index }
			}
			if = {
				limit = { check_variable = { status_effect_type_id^current_target_index = 2 } }
				subtract_from_variable = { defence_multiplier_array^current_target = status_effect_magnitude^current_target_index }
			}
			if = {
				limit = { check_variable = { status_effect_type_id^current_target_index = 5 } }
				add_to_variable = { evasion_array^current_target = status_effect_magnitude^current_target_index }
			}
			if = {
				limit = { check_variable = { status_effect_type_id^current_target_index = 3 } }
				subtract_from_variable = { health_change_array^current_target = status_effect_magnitude^current_target_index }
			}
			if = {
				limit = { check_variable = { status_effect_type_id^current_target_index = 4 } }
				subtract_from_variable = { vitality_change_array^current_target = status_effect_magnitude^current_target_index }
			}
		}
		add_to_array = { active_effects = status_effect_spell_type^current_target_index }
	}
}
percentify = {
	for_each_loop = {
		array = fighters_array
		set_variable = { var = attack_percent_array^v value = attack_multiplier_array^v }
		subtract_from_variable = { var = attack_percent_array^v value = 1 }
		multiply_variable = { var = attack_percent_array^v value = 100 }
		
		set_variable = { var = defence_percent_array^v value = 1 }
		subtract_from_variable = { var = defence_percent_array^v value = defence_multiplier_array^v }
		multiply_variable = { var = defence_percent_array^v value = 100 }
	}
}
fight_probability_calc = { 
	random_list = {
		1 = { set_temp_variable = { var = probability_check_temp_1 value = 0 } }
		1 = { set_temp_variable = { var = probability_check_temp_1 value = 10 } }
		1 = { set_temp_variable = { var = probability_check_temp_1 value = 20 } }
		1 = { set_temp_variable = { var = probability_check_temp_1 value = 30 } }
		1 = { set_temp_variable = { var = probability_check_temp_1 value = 40 } }
		1 = { set_temp_variable = { var = probability_check_temp_1 value = 50 } }
		1 = { set_temp_variable = { var = probability_check_temp_1 value = 60 } }
		1 = { set_temp_variable = { var = probability_check_temp_1 value = 70 } }
		1 = { set_temp_variable = { var = probability_check_temp_1 value = 80 } }
		1 = { set_temp_variable = { var = probability_check_temp_1 value = 90 } }
	}
	random_list = {
		1 = { set_temp_variable = { var = probability_check_temp_2 value = 0 } }
		1 = { set_temp_variable = { var = probability_check_temp_2 value = 1 } }
		1 = { set_temp_variable = { var = probability_check_temp_2 value = 2 } }
		1 = { set_temp_variable = { var = probability_check_temp_2 value = 3 } }
		1 = { set_temp_variable = { var = probability_check_temp_2 value = 4 } }
		1 = { set_temp_variable = { var = probability_check_temp_2 value = 5 } }
		1 = { set_temp_variable = { var = probability_check_temp_2 value = 6 } }
		1 = { set_temp_variable = { var = probability_check_temp_2 value = 7 } }
		1 = { set_temp_variable = { var = probability_check_temp_2 value = 8 } }
		1 = { set_temp_variable = { var = probability_check_temp_2 value = 9 } }
	}
	add_to_temp_variable = { probability_check_temp_1 = probability_check_temp_2 }
	set_variable = { var = fight_probability value = probability_check_temp_1 }
}
attack_sound = {
	if = {
		limit = { check_variable = { fighter_names_array^fight_attacker_num = 0 } }
		sound_effect = "sol_attack_daybreaker_ev"
	}
	if = {
		limit = { check_variable = { fighter_names_array^fight_attacker_num = 1 } }
		sound_effect = "sol_attack_nightmare_ev"
	}
}
handle_custom_effects = {
	add_to_variable = { number_of_turns = 1 }
	if = {
		limit = { has_country_flag = has_daybreaker_nightmare_fight }
		if = {
			limit = { 
				check_variable = { number_of_turns = 2 } 
				NOT = { is_in_array = { used_dialogue = 1 } }
			}
			block_spells = yes
			set_variable = { right_display_image = 0 }
			set_variable = { left_display_image = -1 }
			set_variable = { left_fight_frame = 1 }
			set_variable = { right_fight_frame = 2 }
			set_variable = { fight_dialogue_loc_key = 1 }
			add_to_variable = { var = sol_dialogue_var value = 1 }
			add_to_array = { used_dialogue = 1 }			
		}
		else_if = {
			limit = { 
				check_variable = { number_of_turns = 3 }
				NOT = { is_in_array = { used_dialogue = 2 } }
			}
			block_spells = yes
			set_variable = { right_display_image = -1 }
			set_variable = { left_display_image = 1 }
			set_variable = { left_fight_frame = 2 }
			set_variable = { right_fight_frame = 1 }
			set_variable = { fight_dialogue_loc_key = 2 }
			add_to_variable = { var = sol_dialogue_var value = 1 }
			add_to_array = { used_dialogue = 2 }
		}
		else_if = {
			limit = { 
				check_variable = { health_array^nightmare_fight_num < 100 } 
				NOT = { is_in_array = { used_dialogue = 3 } }
			}
			block_spells = yes
			set_variable = { right_display_image = 0 }
			set_variable = { left_display_image = -1 }
			set_variable = { left_fight_frame = 1 }
			set_variable = { right_fight_frame = 2 }
			set_variable = { fight_dialogue_loc_key = 3 }
			add_to_variable = { var = sol_dialogue_var value = 1 }
			add_to_array = { used_dialogue = 3 }
		}
		else_if = {
			limit = { 
				check_variable = { health_array^daybreaker_fight_num < 100 } 
				NOT = { is_in_array = { used_dialogue = 4 } }
			}
			block_spells = yes
			set_variable = { right_display_image = -1 }
			set_variable = { left_display_image = 1 }
			set_variable = { left_fight_frame = 2 }
			set_variable = { right_fight_frame = 1 }
			set_variable = { fight_dialogue_loc_key = 4 }
			add_to_variable = { var = sol_dialogue_var value = 1 }
			add_to_array = { used_dialogue = 4 }
		}
		else_if = {
			limit = { 
				check_variable = { health_array^nightmare_fight_num < 30 } 
				NOT = { is_in_array = { used_dialogue = 5 } }
			}
			block_spells = yes
			set_variable = { right_display_image = 0 }
			set_variable = { left_display_image = -1 }
			set_variable = { left_fight_frame = 1 }
			set_variable = { right_fight_frame = 2 }
			set_variable = { fight_dialogue_loc_key = 5 }
			add_to_variable = { var = sol_dialogue_var value = 1 }
			add_to_array = { used_dialogue = 5 }
		}
	}
	if = {
		limit = { has_country_flag = has_celestia_nightmare_fight }
		if = {
			limit = { 
				check_variable = { number_of_turns = 2 } 
				NOT = { is_in_array = { used_dialogue = 6 } }
			}
			block_spells = yes
			set_variable = { right_display_image = 0 }
			set_variable = { left_display_image = -1 }
			set_variable = { left_fight_frame = 1 }
			set_variable = { right_fight_frame = 1 }
			set_variable = { fight_dialogue_loc_key = 6 }
			add_to_variable = { var = sol_dialogue_var value = 1 }
			add_to_array = { used_dialogue = 6 }			
		}
		else_if = {
			limit = { 
				check_variable = { number_of_turns = 3 }
				NOT = { is_in_array = { used_dialogue = 7 } }
			}
			block_spells = yes
			set_variable = { right_display_image = -1 }
			set_variable = { left_display_image = 1 }
			set_variable = { left_fight_frame = 2 }
			set_variable = { right_fight_frame = 1 }
			set_variable = { fight_dialogue_loc_key = 7 }
			add_to_variable = { var = sol_dialogue_var value = 1 }
			add_to_array = { used_dialogue = 7 }
		}
		else_if = {
			limit = { 
				check_variable = { health_array^nightmare_fight_num < 100 } 
				NOT = { is_in_array = { used_dialogue = 8 } }
			}
			block_spells = yes
			set_variable = { right_display_image = 0 }
			set_variable = { left_display_image = -1 }
			set_variable = { left_fight_frame = 1 }
			set_variable = { right_fight_frame = 1 }
			set_variable = { fight_dialogue_loc_key = 8 }
			add_to_variable = { var = sol_dialogue_var value = 1 }
			add_to_array = { used_dialogue = 8 }
		}
		else_if = {
			limit = { 
				check_variable = { health_array^daybreaker_fight_num < 100 } 
				NOT = { is_in_array = { used_dialogue = 9 } }
			}
			block_spells = yes
			set_variable = { right_display_image = -1 }
			set_variable = { left_display_image = 1 }
			set_variable = { left_fight_frame = 2 }
			set_variable = { right_fight_frame = 1 }
			set_variable = { fight_dialogue_loc_key = 9 }
			add_to_variable = { var = sol_dialogue_var value = 1 }
			add_to_array = { used_dialogue = 9 }
		}
	}
	if = {
		limit = { has_country_flag = has_daybreaker_luna_fight }
		if = {
			limit = { 
				check_variable = { number_of_turns = 5 } 
				NOT = { is_in_array = { used_dialogue = 10 } }
			}
			block_spells = yes
			set_variable = { right_display_image = -1 }
			set_variable = { left_display_image = 1 }
			set_variable = { left_fight_frame = 1 }
			set_variable = { right_fight_frame = 1 }
			set_variable = { fight_dialogue_loc_key = 10 }
			add_to_variable = { var = sol_dialogue_var value = 1 }
			add_to_array = { used_dialogue = 10 }			
		}
		else_if = {
			limit = { 
				check_variable = { number_of_turns = 6 }
				NOT = { is_in_array = { used_dialogue = 11 } }
			}
			block_spells = yes
			set_variable = { right_display_image = 0 }
			set_variable = { left_display_image = -1 }
			set_variable = { left_fight_frame = 1 }
			set_variable = { right_fight_frame = 2 }
			set_variable = { fight_dialogue_loc_key = 11 }
			add_to_variable = { var = sol_dialogue_var value = 1 }
			add_to_array = { used_dialogue = 11 }
		}
		else_if = {
			limit = { 
				check_variable = { health_array^nightmare_fight_num < 100 } 
				NOT = { is_in_array = { used_dialogue = 12 } }
			}
			block_spells = yes
			set_variable = { right_display_image = 0 }
			set_variable = { left_display_image = -1 }
			set_variable = { left_fight_frame = 1 }
			set_variable = { right_fight_frame = 2 }
			set_variable = { fight_dialogue_loc_key = 12 }
			add_to_variable = { var = sol_dialogue_var value = 1 }
			add_to_array = { used_dialogue = 12 }
		}
		else_if = {
			limit = { 
				check_variable = { health_array^daybreaker_fight_num < 150 } 
				check_variable = { nightmare_frame = 1 }
				NOT = { is_in_array = { used_dialogue = 13 } }
			}
			block_spells = yes
			set_variable = { right_display_image = -1 }
			set_variable = { left_display_image = 1 }
			set_variable = { left_fight_frame = 1 }
			set_variable = { right_fight_frame = 1 }
			set_variable = { fight_dialogue_loc_key = 13 }
			add_to_variable = { var = sol_dialogue_var value = 1 }
			add_to_array = { used_dialogue = 13 }
		}
		else_if = {
			limit = { 
				check_variable = { health_array^nightmare_fight_num < 70 } 
				NOT = {
					has_country_flag = daybreaker_luna_fight_nightmare_accepted
					has_country_flag = daybreaker_luna_fight_nightmare_rejected
				}
			}
			block_spells = yes
			country_event = paxsolaris.326
		}
	}
}
block_spells = {
	set_country_flag = fight_spells_blocked
	for_each_loop = {
		array = fighters_array
		set_variable = { var = spell_1_frame_array^v value = 2 }
		set_variable = { var = spell_2_frame_array^v value = 2 }
		set_variable = { var = spell_3_frame_array^v value = 2 }
		set_variable = { var = spell_4_frame_array^v value = 2 }
		set_variable = { var = spell_5_frame_array^v value = 2 }
	}
}
handle_victory = {
	if = {
		limit = { has_country_flag = has_daybreaker_nightmare_fight }
		if = {
			limit = { has_country_flag = sol_fight_right_win }
			if = { 
				limit = { EQS = { is_ai = no } }
				EQS = { country_event = paxsolaris.316 }
			}
			else = {
				NLR = { country_event = paxsolaris.316 }
			}
		}
		if = {
			limit = { has_country_flag = sol_fight_left_win }
			if = { 
				limit = { EQS = { is_ai = no } }
				EQS = { country_event = paxsolaris.318 }
			}
			else = {
				NLR = { country_event = paxsolaris.318 }
			}
		}
	}
	if = {
		limit = { has_country_flag = has_celestia_nightmare_fight }
		if = {
			limit = { has_country_flag = sol_fight_right_win }
			if = { 
				limit = { EQS = { is_ai = no } }
				EQS = { country_event = paxsolaris.317 }
			}
			else = {
				NLR = { country_event = paxsolaris.317 }
			}
		}
		if = {
			limit = { has_country_flag = sol_fight_left_win }
			if = { 
				limit = { EQS = { is_ai = no } }
				EQS = { country_event = paxsolaris.319 }
			}
			else = {
				NLR = { country_event = paxsolaris.319 }
			}
		}
	}
	if = {
		limit = { has_country_flag = has_daybreaker_luna_fight }
		if = {
			limit = { has_country_flag = left_side_ai_controlled } #Daybreaker is Player
			if = {
				limit = { has_country_flag = sol_fight_right_win }
				if = { 
					limit = { has_country_flag = daybreaker_luna_fight_nightmare_accepted }
					EQS = { country_event = paxsolaris.334 }
				}
				else = {
					if = {
						limit = { EQS = { is_under_threat = yes } }
						set_country_flag = paxsolaris_338_luna
						39 = { save_global_event_target_as = SOL_NLR_last_state }
						EQS = { country_event = paxsolaris.338 }
					}
					else = {
						EQS = { country_event = paxsolaris.332 }
					}
				}
			}
			else = {
				set_variable = { var = sol_game_over value = 1 }
			}
		}
		if = {
			limit = { has_country_flag = right_side_ai_controlled } #Luna is Player
			if = {
				limit = { has_country_flag = sol_fight_left_win }
				if = { 
					limit = { has_country_flag = daybreaker_luna_fight_nightmare_accepted }
					EQS = { country_event = paxsolaris.335 }
				}
				else = {
					EQS = { country_event = paxsolaris.333 }
				}
			}
			else = {
				if = {
					limit = { EQS = { is_under_threat = yes } }
					set_variable = { var = sol_game_over value = 1 } #If Daybreaker is under threat, the player would get a game over because there would be no civil war. So we replay the fight. 
				}
				else = {
					if = { 
						limit = { has_country_flag = daybreaker_luna_fight_nightmare_accepted }
						EQS = { country_event = paxsolaris.334 }
					}
					else = {
						EQS = { country_event = paxsolaris.332 }
					}
				}
			}
		}
	}
}